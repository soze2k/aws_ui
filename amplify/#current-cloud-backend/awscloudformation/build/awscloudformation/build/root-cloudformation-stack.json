{
  "Description": "Root Stack for AWS Amplify CLI",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "DeploymentBucketName": {
      "Type": "String",
      "Default": "DeploymentBucket",
      "Description": "Name of the common deployment bucket provided by the parent stack"
    },
    "AuthRoleName": {
      "Type": "String",
      "Default": "AuthRoleName",
      "Description": "Name of the common deployment bucket provided by the parent stack"
    },
    "UnauthRoleName": {
      "Type": "String",
      "Default": "UnAuthRoleName",
      "Description": "Name of the common deployment bucket provided by the parent stack"
    }
  },
  "Outputs": {
    "Region": {
      "Description": "CloudFormation provider root stack Region",
      "Value": {
        "Ref": "AWS::Region"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-Region"
        }
      }
    },
    "StackName": {
      "Description": "CloudFormation provider root stack ID",
      "Value": {
        "Ref": "AWS::StackName"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-StackName"
        }
      }
    },
    "StackId": {
      "Description": "CloudFormation provider root stack name",
      "Value": {
        "Ref": "AWS::StackId"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-StackId"
        }
      }
    },
    "AuthRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "AuthRole",
          "Arn"
        ]
      }
    },
    "UnauthRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "UnauthRole",
          "Arn"
        ]
      }
    },
    "DeploymentBucketName": {
      "Description": "CloudFormation provider root stack deployment bucket name",
      "Value": {
        "Ref": "DeploymentBucketName"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeploymentBucketName"
        }
      }
    },
    "AuthRoleName": {
      "Value": {
        "Ref": "AuthRole"
      }
    },
    "UnauthRoleName": {
      "Value": {
        "Ref": "UnauthRole"
      }
    }
  },
  "Resources": {
    "DeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "DeploymentBucketName"
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "AuthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Deny",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "RoleName": {
          "Ref": "AuthRoleName"
        }
      }
    },
    "UnauthRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Deny",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "RoleName": {
          "Ref": "UnauthRoleName"
        }
      }
    },
    "APIGatewayAuthStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/api/APIGatewayAuthStack.json",
        "Parameters": {
          "authRoleName": {
            "Ref": "AuthRoleName"
          },
          "unauthRoleName": {
            "Ref": "UnauthRoleName"
          },
          "env": "dev",
          "fit5225ass2api": {
            "Fn::GetAtt": [
              "apifit5225ass2api",
              "Outputs.ApiId"
            ]
          }
        }
      }
    },
    "authfit5225ass20a3918f4": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/auth/fit5225ass20a3918f4-cloudformation-template.json",
        "Parameters": {
          "identityPoolName": "fit5225ass20a3918f4_identitypool_0a3918f4",
          "allowUnauthenticatedIdentities": false,
          "resourceNameTruncated": "fit5220a3918f4",
          "userPoolName": "fit5225ass20a3918f4_userpool_0a3918f4",
          "autoVerifiedAttributes": "email",
          "mfaConfiguration": "OFF",
          "mfaTypes": "SMS Text Message",
          "smsAuthenticationMessage": "Your authentication code is {####}",
          "smsVerificationMessage": "Your verification code is {####}",
          "emailVerificationSubject": "Your verification code",
          "emailVerificationMessage": "Your verification code is {####}",
          "defaultPasswordPolicy": false,
          "passwordPolicyMinLength": 8,
          "passwordPolicyCharacters": "",
          "requiredAttributes": "email,family_name,given_name",
          "aliasAttributes": "",
          "userpoolClientGenerateSecret": false,
          "userpoolClientRefreshTokenValidity": 30,
          "userpoolClientWriteAttributes": "email",
          "userpoolClientReadAttributes": "email",
          "userpoolClientLambdaRole": "fit5220a3918f4_userpoolclient_lambda_role",
          "userpoolClientSetAttributes": false,
          "sharedId": "0a3918f4",
          "resourceName": "fit5225ass20a3918f4",
          "authSelections": "identityPoolAndUserPool",
          "useDefault": "default",
          "usernameAttributes": "email",
          "triggers": "{}",
          "userPoolGroupList": "",
          "serviceName": "Cognito",
          "usernameCaseSensitive": false,
          "useEnabledMfas": true,
          "authRoleArn": {
            "Fn::GetAtt": [
              "AuthRole",
              "Arn"
            ]
          },
          "unauthRoleArn": {
            "Fn::GetAtt": [
              "UnauthRole",
              "Arn"
            ]
          },
          "breakCircularDependency": true,
          "dependsOn": "",
          "env": "dev"
        }
      }
    },
    "functionS3Triggerc3f10bd5": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/function/S3Triggerc3f10bd5-cloudformation-template.json",
        "Parameters": {
          "deploymentBucketName": "amplify-fit5225ass2-dev-93648-deployment",
          "s3Key": "amplify-builds/S3Triggerc3f10bd5-4b58303845306258394b-build.zip",
          "env": "dev"
        }
      }
    },
    "functionfit5225search": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/function/fit5225search-cloudformation-template.json",
        "Parameters": {
          "deploymentBucketName": "amplify-fit5225ass2-dev-93648-deployment",
          "s3Key": "amplify-builds/fit5225search-2b4444784a35305a4953-build.zip",
          "authfit5225ass20a3918f4UserPoolId": {
            "Fn::GetAtt": [
              "authfit5225ass20a3918f4",
              "Outputs.UserPoolId"
            ]
          },
          "functionS3Triggerc3f10bd5Name": {
            "Fn::GetAtt": [
              "functionS3Triggerc3f10bd5",
              "Outputs.Name"
            ]
          },
          "storageuploadedimageBucketName": {
            "Fn::GetAtt": [
              "storageuploadedimage",
              "Outputs.BucketName"
            ]
          },
          "env": "dev"
        }
      }
    },
    "storageuploadedimage": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/storage/cloudformation-template.json",
        "Parameters": {
          "bucketName": "fit5225ass2bucket01",
          "selectedGuestPermissions": "",
          "selectedAuthenticatedPermissions": "s3:PutObject,s3:GetObject,s3:ListBucket,s3:DeleteObject",
          "unauthRoleName": {
            "Ref": "UnauthRoleName"
          },
          "authRoleName": {
            "Ref": "AuthRoleName"
          },
          "triggerFunction": "S3Triggerc3f10bd5",
          "s3PrivatePolicy": "Private_policy_cf59b04b",
          "s3ProtectedPolicy": "Protected_policy_cf59b04b",
          "s3PublicPolicy": "Public_policy_cf59b04b",
          "s3ReadPolicy": "read_policy_cf59b04b",
          "s3UploadsPolicy": "Uploads_policy_cf59b04b",
          "authPolicyName": "s3_amplify_cf59b04b",
          "unauthPolicyName": "s3_amplify_cf59b04b",
          "AuthenticatedAllowList": "ALLOW",
          "GuestAllowList": "DISALLOW",
          "s3PermissionsAuthenticatedPrivate": "s3:PutObject,s3:GetObject,s3:DeleteObject",
          "s3PermissionsAuthenticatedProtected": "s3:PutObject,s3:GetObject,s3:DeleteObject",
          "s3PermissionsAuthenticatedPublic": "s3:PutObject,s3:GetObject,s3:DeleteObject",
          "s3PermissionsAuthenticatedUploads": "s3:PutObject",
          "s3PermissionsGuestPublic": "DISALLOW",
          "s3PermissionsGuestUploads": "DISALLOW",
          "functionS3Triggerc3f10bd5Name": {
            "Fn::GetAtt": [
              "functionS3Triggerc3f10bd5",
              "Outputs.Name"
            ]
          },
          "functionS3Triggerc3f10bd5Arn": {
            "Fn::GetAtt": [
              "functionS3Triggerc3f10bd5",
              "Outputs.Arn"
            ]
          },
          "functionS3Triggerc3f10bd5LambdaExecutionRole": {
            "Fn::GetAtt": [
              "functionS3Triggerc3f10bd5",
              "Outputs.LambdaExecutionRole"
            ]
          },
          "env": "dev"
        }
      }
    },
    "apifit5225ass2api": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/amplify-fit5225ass2-dev-93648-deployment/amplify-cfn-templates/api/fit5225ass2api-cloudformation-template.json",
        "Parameters": {
          "functionfit5225searchName": {
            "Fn::GetAtt": [
              "functionfit5225search",
              "Outputs.Name"
            ]
          },
          "functionfit5225searchArn": {
            "Fn::GetAtt": [
              "functionfit5225search",
              "Outputs.Arn"
            ]
          },
          "env": "dev"
        }
      }
    },
    "UpdateRolesWithIDPFunction": {
      "DependsOn": [
        "AuthRole",
        "UnauthRole",
        "authfit5225ass20a3918f4"
      ],
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "const response = require('cfn-response');",
                "const { IAMClient, GetRoleCommand, UpdateAssumeRolePolicyCommand } = require('@aws-sdk/client-iam');",
                "exports.handler = function(event, context) {",
                "    // Don't return promise, response.send() marks context as done internally",
                "    const ignoredPromise = handleEvent(event, context)",
                "};",
                "async function handleEvent(event, context) {",
                "    try {",
                "        let authRoleName = event.ResourceProperties.authRoleName;",
                "        let unauthRoleName = event.ResourceProperties.unauthRoleName;",
                "        let idpId = event.ResourceProperties.idpId;",
                "        let authParamsJson = {",
                "            'Version': '2012-10-17',",
                "            'Statement': [{",
                "                'Effect': 'Allow',",
                "                'Principal': {'Federated': 'cognito-identity.amazonaws.com'},",
                "                'Action': 'sts:AssumeRoleWithWebIdentity',",
                "                'Condition': {",
                "                    'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},",
                "                    'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}",
                "                }",
                "            }]",
                "        };",
                "        let unauthParamsJson = {",
                "            'Version': '2012-10-17',",
                "            'Statement': [{",
                "                'Effect': 'Allow',",
                "                'Principal': {'Federated': 'cognito-identity.amazonaws.com'},",
                "                'Action': 'sts:AssumeRoleWithWebIdentity',",
                "                'Condition': {",
                "                    'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},",
                "                    'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}",
                "                }",
                "            }]",
                "        };",
                "        if (event.RequestType === 'Delete') {",
                "            try {",
                "                delete authParamsJson.Statement[0].Condition;",
                "                delete unauthParamsJson.Statement[0].Condition;",
                "                let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};",
                "                let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};",
                "                const iam = new IAMClient({region: event.ResourceProperties.region});",
                "                let res = await Promise.all([",
                "                    iam.send(new GetRoleCommand({RoleName: authParams.RoleName})),",
                "                    iam.send(new GetRoleCommand({RoleName: unauthParams.RoleName}))",
                "                ]);",
                "                console.log('in res', res);",
                "                res = await Promise.all([",
                "                    iam.send(new UpdateAssumeRolePolicyCommand(authParams)),",
                "                    iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))",
                "                ]);",
                "                console.log('delete response data' + JSON.stringify(res));",
                "                response.send(event, context, response.SUCCESS, {});",
                "            } catch (err) {",
                "                console.log(err.stack);",
                "                response.send(event, context, response.SUCCESS, {Error: err});",
                "            }",
                "        } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {",
                "            const iam = new IAMClient({region: event.ResourceProperties.region});",
                "            let authParams = {PolicyDocument: JSON.stringify(authParamsJson), RoleName: authRoleName};",
                "            let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson), RoleName: unauthRoleName};",
                "            const res = await Promise.all([",
                "                iam.send(new UpdateAssumeRolePolicyCommand(authParams)),",
                "                iam.send(new UpdateAssumeRolePolicyCommand(unauthParams))",
                "            ]);",
                "            console.log('createORupdate' + res);",
                "            console.log('response data' + JSON.stringify(res));",
                "            response.send(event, context, response.SUCCESS, {});",
                "        }",
                "    } catch (err) {",
                "        console.log(err.stack);",
                "        response.send(event, context, response.FAILED, {Error: err});",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Timeout": 300,
        "Role": {
          "Fn::GetAtt": [
            "UpdateRolesWithIDPFunctionRole",
            "Arn"
          ]
        }
      }
    },
    "UpdateRolesWithIDPFunctionOutputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UpdateRolesWithIDPFunction",
            "Arn"
          ]
        },
        "region": {
          "Ref": "AWS::Region"
        },
        "idpId": {
          "Fn::GetAtt": [
            "authfit5225ass20a3918f4",
            "Outputs.IdentityPoolId"
          ]
        },
        "authRoleName": {
          "Ref": "AuthRole"
        },
        "unauthRoleName": {
          "Ref": "UnauthRole"
        }
      }
    },
    "UpdateRolesWithIDPFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AuthRole"
              },
              "-idp"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "UpdateRolesWithIDPFunctionPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:UpdateAssumeRolePolicy",
                    "iam:GetRole"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "AuthRole",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:UpdateAssumeRolePolicy",
                    "iam:GetRole"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "UnauthRole",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  }
}